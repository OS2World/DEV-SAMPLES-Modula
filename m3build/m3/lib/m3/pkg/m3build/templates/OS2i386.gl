% Copyright (C) 1989, 1992 Digital Equipment Corporation
% All rights reserved.
% See the file COPYRIGHT for a full description.
%
% Last Modified On Thu Jun 20 12:17:04 PDT 1996 By heydon
%      Modified On Wed Oct 11 13:36:12 PDT 1995 By najork
%      Modified On Wed Jun 14 13:26:09 PDT 1995 By kalsow
%      Modified On Thu Apr  8 13:45:49 PDT 1993 by muller
%
% Standard configuration file for LINUX
%

%-------------------------------------------------- compilation environment ---

readonly TARGET = "OS2i386"
readonly BUILDTARGET = TARGET
readonly DEFAULT_BUILD_DIR = TARGET

include ("PLATFORMS")  % get the target-dependent mappings
include (OS_TYPE)      % get the OS-dependent functions

readonly NAMING_CONVENTIONS = "0"
%                                        object files       libraries
%  0=Unix                          =>  .o   .io    .mo       libXX.a
%  1=Unix with a grumpy C compiler =>  .o   _i.o   _m.o      libXX.a
%  2=Windows/NT                    =>  .obj .io    .mo       XX.lib
%

%------------------------------------------------------------- export paths ---
% During the installation, destination directories that do not exist
% will be created.  You need the necessary permissions to do so; otherwise,
% the installation will fail, but can be restarted after you have
% fixed the permissions.

INSTALL_ROOT         = "h:/m3/"
readonly EMX_BIN     = "h:/emx/bin"
readonly EMX_LIB     = "h:/emx/lib"
readonly XFREE86_LIB = "h:/XFree86/lib"
readonly OPENGL_LIB  = "h:/opengl/lib"

%-- handy for installations that keep all M3 stuff together

BIN_INSTALL   = INSTALL_ROOT & "bin"                % executables
LIB_INSTALL   = INSTALL_ROOT & "lib/m3/" & TARGET   % libraries
DOC_INSTALL   = INSTALL_ROOT & "lib/m3/doc"         % documents
PKG_INSTALL   = INSTALL_ROOT & "lib/m3/pkg"         % packages
EMACS_INSTALL = INSTALL_ROOT & "lib/elisp"          % emacs lisp code
MAN_INSTALL   = INSTALL_ROOT & "man"                % man pages
HTML_INSTALL  = INSTALL_ROOT & "lib/m3/www"         % public hypertext

% The manual pages normally go in subdirectories man{1,...8} of
% the MAN_INSTALL directory.  If you prefer to have them all in
% a single section, define MAN_SECTION to be that section's name.
% MAN_SECTION = "l"

% On some systems (e.g. AFS) you must install public files in a different
% place from where you use them.  If that is the case for your system,
% specify the "use" location here, otherwise leave them alone.
BIN_USE   = BIN_INSTALL
LIB_USE   = LIB_INSTALL
PKG_USE   = PKG_INSTALL

readonly INSTALL_IMPLS = ""
% "TRUE"
%    => save all source files during the install
%    => makes debugging easier and browsing more fruitful
% "" (i.e. FALSE)
%    => save only the exported interfaces and templates
%    => makes the installed system slightly smaller.

readonly NEED_OBJECTS = ""
% "TRUE"
%    => accumulate a list of derived objects in COMPILE_OBJECTS
%    => for building shared libraries in the library_hooks function below
% ""
%    => don't bother

%---------------------------------------------------------------------- X11 ---
% If you have X11R4 installed and would like the X11R4 binding interfaces
% to be built, define the procedure "import_X11R4" to import the libraries
% that are needed.  Otherwise, define "import_X11R4" to be an empty procedure.
%
% If you use the MIT server with DECnet support, you need X11 and dnet,
% otherwise X11 should be enough.
%
% Since X11R5 is an extension of X11R4, you can use the X11R5 libraries
% instead of X11R4.  However, the Modula-3 binding interfaces have not
% yet been upgraded to X11R5.
%
% "import_X11R4" is called from the X11R4 package.
% "import_Motif" is called from the motif package.
% "import_DECPEX" is called from the PEX package.
% "import_OpenGL" is called from the opengl package.
% "import_TCP" is called from the tcp package.

readonly proc import_X11R4() is
  import_lib("Xaw",  XFREE86_LIB)
  import_lib("Xmu",  XFREE86_LIB)
  import_lib("Xext", XFREE86_LIB)
  import_lib("Xt",   XFREE86_LIB)
  import_lib("X11",  XFREE86_LIB)
end

readonly proc import_Motif() is
% import_lib("Xm",   "/usr/local/lib")
end

readonly proc import_DECPEX() is
  % DEC PEX differs from MIT PEX, and is only supported on Digital machines.
  import_lib("PEX5",  XFREE86_LIB)
end

readonly proc import_OpenGL() is
  import_lib ("opengl", OPENGL_LIB)
  import_lib ("libaux", OPENGL_LIB)
end

readonly proc import_TCP() is
  import_lib("socket", EMX_LIB)
end

readonly PLATFORM_SUPPORTS_X      = "TRUE"
readonly PLATFORM_SUPPORTS_MOTIF  = ""
readonly PLATFORM_SUPPORTS_PEX    = ""
readonly PLATFORM_SUPPORTS_DECPEX = ""
readonly PLATFORM_SUPPORTS_OPENGL = "TRUE"

% Does your X11 server have the shared memory extension?
%readonly X11_WITH_SHARED_MEM = "TRUE"
readonly X11_WITH_SHARED_MEM = ""

%-------------------------------------------------------------------- emacs ---
% If you have emacs and want to compile ".el" files to ".elc" files,
% fill in the function below.  Otherwise, comment out or delete the
% entire function.  Note, the distributed code assumes gnuemacs version 19
% or later.

readonly proc emacs_compile (el) is
  exec ("emacs -batch -f batch-byte-compile", el)
end

%---------------------------------------------------- C compiler and linker ---
% The following definitions are used to compile and link C modules.
% Note that these definitions can be overridden on the m3build command
% line with "-D".  (e.g.  m3build -DCC=gcc)
%
% _ifdef(a,b,c) == if defined(a) return b else return c
%
% The actual definitions must be kept on one line due to finicky details
% of the bootstrap process.

CC = _ifdef ("CC", CC, [ EMX_BIN & "/gcc.exe", "-g", "-Zmt", "-Zcrtdll", "-Zomf" ])
%--- C compiler with flags for compiling a single ".c" file

%LINK = _ifdef ("LINK", LINK, [ EMX_BIN & "/gcc.exe", "-Zexe", "-Zmt", "-Zcrtdll" ])
LINK = _ifdef ("LINK", LINK, [ BIN_INSTALL & "/m3os2lnk.exe",
                               "-X:PGM",
                               "-s:" & EMX_LIB & "/crt0.obj",
                               "-O:/NOI",
                               "-O:/NOL",
                               "-O:/NOE",
                               "-O:/BAT",
                               "-O:/PACKC",
                               "-O:/DE",
                               "-O:/PM:VIO",
                               "-O:/BAS:0x10000",
                               "-O:/ST:0x800000",
                               "-L:" & EMX_LIB & "/mt/",
                               "-L:" & EMX_LIB & "/",
                               "-l:c_alias",
                               "-l:c_static",
                               "-l:c_import",
                               "-l:os2",
                               "-l:emx2",
                               "-l:end" ])
%--- C compiler with flags for linking

%MAKELIB = _ifdef ("MAKELIB", MAKELIB, [ EMX_BIN & "/ar.exe", "crus" ])
MAKELIB = _ifdef ("MAKELIB", MAKELIB, [ BIN_INSTALL & "/m3os2lnk.exe",
                                        "-X:DLL",
                                        "-s:" & EMX_LIB & "/dll0.obj",
                                        "-S:0x800000",
                                        "-O:/NOI",
                                        "-O:/NOL",
                                        "-O:/NOD",
                                        "-O:/BAT",
                                        "-L:" & EMX_LIB & "/mt/",
                                        "-L:" & EMX_LIB & "/",
                                        "-l:c_alias",
                                        "-l:c_static",
                                        "-l:c_import",
                                        "-l:os2",
                                        "-l:emx2",
                                        "-l:end" ])
%--- program to build library archives

RANLIB = _ifdef ("RANLIB", RANLIB, [ EMX_BIN & "/touch.exe" ])
%--- program to index libraries

ASM = _ifdef ("ASM", ASM, [ EMX_BIN & "/as.exe", "-Zomf" ])
%--- assembler

%------------------------------------------------------------- GNU variants ---
% The two large pieces of GNU software used by the Modula-3 system
% gcc(=m3cc) and gdb(=m3gdb) often require slightly different C compilers
% or flags.  They are specified here.  Note that they may be overridden
% from the m3build command line.
%
% To use the GNU defaults for CC and CFLAGS, specify "*".
%

GNU_CC     = _ifdef ("GNU_CC",     GNU_CC,     EMX_BIN & "/gcc.exe")
GNU_CFLAGS = _ifdef ("GNU_CFLAGS", GNU_CFLAGS, "-g")
GNU_MAKE   = _ifdef ("GNU_MAKE",   GNU_MAKE,   EMX_BIN & "/make.exe")

%-------------------------------------------------------- Modula-3 compiler ---
% The syntax for the values passed to most of the M3_CONFIG options is
% "@pgm@arg1@...@argn@" where "@" is an arbitrary character.  The
% separator character must begin and end the value.

% Where is the driver?
M3 = LIB_USE & "/m3.exe"

% What are the standard flags?
M3OPTIONS = [ "-w1", "-why", "-g" ]

M3_CONFIG = [
   "-Y1" & _pack_args (CC),
   "-Y2" & _pack_args (LINK),
   "-Y3" & _pack_args (MAKELIB),
   "-Y4" & _pack_args (RANLIB),
   "-Y7" & _pack_args (ASM),

   %"-Y6@" & LIB_USE & "/m3cgc1.exe@-quiet@",
   "-X0@-unfold_nested_procs@",
   %"-Y6@" & PKG_INSTALL & "/m3staloneback/" & TARGET & "/m3back.exe@-AsmObj@",
   % --- the Modula-3 IL to assembly language pass

   "-z2@-lm@",  % --- libraries systematically linked with all programs

   "-z3" & LIB_USE & SL & "report_coverage.o",
   % --- library linked in programs compiled with "-Z" coverage option

   "-z5" & NAMING_CONVENTIONS,
   % Set the host naming conventions.

   "-z61",
   % Values of "-z6":
   %   "0" => the m3 driver will split library names and pass -L/-l
   %          arguments to the linker
   %   "1" => the m3 driver will pass libraries with full path names
   %   "2" => like "0" except that for shared libraries, the driver
   %          passes -Rdir as well as -Ldir to the linker

   "-zA0",
   % The "-zA" option specifies the maximum size (in megabytes) that Pass0
   % is allowed to reach as a persistent server before the driver kills it.
   % Setting it to zero disables server mode.
   % NOTE: the current compiler is buggy, leave "-zA" alone!

   "-zB@-O@",  % --- pass 1 options implied by "-O"
   "-zC@-O@",  % --- pass 6 options implied by "-O"
   "-zD@@",    % --- pass 7 options implied by "-O"

   "-zE@-g@",  % --- pass 1 options implied by "-g"
   "-zF@-g@",  % --- pass 6 options implied by "-g"
   "-zG@@",    % --- pass 7 options implied by "-g"

   "-zH" & NAMING_CONVENTIONS,
   % --- the target's naming conventions

   "-zI" & BUILDTARGET,
   % --- the target architecture

   % "-zJ10",
   % The option "-zJx1" specifies that pass "x" is "noisy", "-zJx0"
   % specifices that it's not.  The default is to assume that passes
   % are not noisy.  The driver collects the standard output of noisy
   % passes in a file and then deletes the file, unless "-keep" or
   % "-verbose" is specified.

   "-zK0",
   % --- Set the value of "-zK" to "1" if you want the m3 driver to
   %     supply -Bdynamic/-Bstatic options to the linker, "0" otherwise.

   "-Bdynamic",
   % --- libraries are shared by default.  If you give -zK1 you should
   %     also provide an initial -Bdynamic or -Bstatic.

   "-zL0"
   % --- Set the value of "-zL" to "1" if you want .M3LINK files produced
   %     for a dynamic loader
]

proc build_standalone() is
   % --- reset the linker to avoid shared libraries.
%   M3_CONFIG += "-Y2@" & EMX_BIN & "/gcc.exe@-Zexe@-Zmt@-Zcrtdll@"
end

proc build_shared() is
   % --- reset the linker to use shared libraries.
%   M3_CONFIG += "-Y2@gcc@-shared@"
end

%-------------------------------------------------------------------- hooks ---
% These are the "last chance" hooks that are called each time a library
% or program is built.  They might build shared libraries or strip
% executables...

% The address block from 0x64800000 to 0x65ffffff was officially reserved
% for Modula-3 shared libraries under LINUX. This will leave room for some
% growth and a few extra libraries. The size of each library is included
% in the table to help compute the starting addresses.
%
% the following sizes give approximately in hexa:
%
%    50K =   d000
%    75K =  13000
%   125K =  20000
%   200K =  31000
%   300K =  4a000
%   450K =  6e000
%   750K =  b8000
%  1250K = 132000
%  2000K = 1e9000
%  3000K = 2dd000
%  4500K = 44b000

LINUX_SHLIBS = {
  "m3core"          : ["0x64400000","0x4000","0x2000","3","5","2692128"],
  "libm3"           : ["0x64800000","0x4000","0x2000","3","5","2692128"],
  "m3tk"            : ["0x64b00000","0x4000","0x2000","3","5","3356712"],
  "ui"              : ["0x64f00000","0x4000","0x2000","3","5","1712982"],
  "vbtkit"          : ["0x65100000","0x4000","0x2000","3","5","1647366"],
  "tcp"             : ["0x65300000","0x4000","0x2000","3","5","54164"],
  "X11R4"           : ["0x65313000","0x4000","0x2000","3","5","256282"],
  "m3tools"         : ["0x65363000","0x4000","0x2000","3","5","58886"],
  "jvideo"          : ["0x65377000","0x4000","0x2000","3","5","184814"],
  "formsvbtpixmaps" : ["0x653b7000","0x4000","0x2000","3","5","40172"],
  "videovbt"        : ["0x653ca000","0x4000","0x2000","3","5","54700"],
  "netobj"          : ["0x653df000","0x4000","0x2000","3","5","311444"],
  "formsvbt"        : ["0x6544d000","0x4000","0x2000","3","5","580382"],
  "codeview"        : ["0x6551d000","0x4000","0x2000","3","5","123766"],
  "mg"              : ["0x6554d000","0x4000","0x2000","3","5","379412"],
  "mgkit"           : ["0x655ed000","0x4000","0x2000","3","5","426502"],
  "zeus"            : ["0x6568d000","0x4000","0x2000","3","5","340814"],
  "synloc"          : ["0x656f6000","0x4000","0x2000","3","5","19646"],
  "synex"           : ["0x65708000","0x4000","0x2000","3","5","108918"],
  "metasyn"         : ["0x65738000","0x4000","0x2000","3","5","96994"],
  "obliqrt"         : ["0x65768000","0x4000","0x2000","3","5","445314"],
  "obliqlibui"      : ["0x65818000","0x4000","0x2000","3","5","41362"],
  "obliqlibm3"      : ["0x6582b000","0x4000","0x2000","3","5","59264"],
  "obliqparse"      : ["0x65843000","0x4000","0x2000","3","5","129680"],
  "obliqprint"      : ["0x65879000","0x4000","0x2000","3","5","72174"],
  "obliq"           : ["0x65899000","0x4000","0x2000","3","5","97216"],
  "obliqlibanim"    : ["0x658c9000","0x4000","0x2000","3","5","77718"]
}

proc before_library_hooks(x) is
%  if LINUX_SHLIBS contains PACKAGE
    % go ahead and build the shared version of this library
    % --- reconfigure the C compiler and assembler
%    M3_CONFIG += "-Y1@gcc@-B" & LIB_USE & "/@"
%    M3_CONFIG += "-Y7@" & LIB_USE & "/as@"
%    exec("mkdir -p jump; mkdir -p jumpas")
%  end
end

proc after_library_hooks(x) is
  local lib    = format ("%s%s", LIB_pre, x)
  local lnklib = format ("%s%s.lib", LIB_pre, x) % link library

  install_derived(lnklib)
  exec ("m3shipdll " & lib)                      % ship DLL to /m3/lib
end

proc old_after_library_hooks(x) is
  if LINUX_SHLIBS contains PACKAGE

    local lib_info      = LINUX_SHLIBS{PACKAGE}
    local base_address  = lib_info[0]
    local jumptab_size  = lib_info[1]
    local global_size   = lib_info[2]
    local version_major = lib_info[3]
    local version_minor = lib_info[4]

    local lib      = format("lib%s", x)
    local lib_a    = format("lib%s.a", x)
    local lib_so_m = format("%s.so.%s", lib, version_major)
    local lib_so   = format("%s.%s", lib_so_m, version_minor)
    local lib_sa   = format("%s.sa", lib)

    if defined("_all")
      if stale (lib_a, lib_a)
        write ("missing ", lib_a, ": not building ", lib_so, CR)
      else
        if stale (lib_so, lib_a)
          exec(LIB_USE & "/buildShared",
                "-n", lib,           "-a", base_address,
                "-j", jumptab_size,  "-g", global_size,
                "-x", version_major, "-y", version_minor,
                "-l \"" & IMPORT_LIBS & " " & OTHER_LIBS_L & "\"")
        end

        link_file(lib_so,lib_so_m)
        install_derived(lib_so)
        install_derived(lib_sa)
        install_derived(lib_so_m)
        install_link_to_derived (lib_so, LIB_INSTALL)
        install_link_to_derived (lib_sa, LIB_INSTALL)
        install_link_to_derived (lib_so_m, LIB_INSTALL)
      end
    end

    deriveds(lib_so, no_extension)
    deriveds(lib_sa, no_extension)
    deriveds(lib_so_m, no_extension)
  end
end

proc before_program_hooks(x) is
end

proc after_program_hooks(x) is
end

%------------------------------------------------------------- installation ---
% "install_file" is called during an "m3build install" for
% each file that neededs to be externally exported.

readonly proc install_file (src, dest, mode) is
  Note_install (src, dest)
  exec ("@cp -p -d -f", src, dest)
  % exec ("@install -c -m", mode, src, dest)
end

%---------------------------------------------- the rest of the environment ---

if defined("_bootstrap") include("COMMON.BOOT") end
include ("COMMON")
